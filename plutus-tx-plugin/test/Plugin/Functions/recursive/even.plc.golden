(program
  (let
    (nonrec)
    (termbind
      (strict)
      (vardecl
        subtractInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (lam
        x
        (con integer)
        (lam y (con integer) [ [ (builtin subtractInteger) x ] y ])
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        x
        (con integer)
        (lam
          y
          (con integer)
          [
            [
              [
                { (builtin ifThenElse) Bool }
                [ [ (builtin equalsInteger) x ] y ]
              ]
              True
            ]
            False
          ]
        )
      )
    )
    (let
      (rec)
      (termbind
        (strict)
        (vardecl even (fun (con integer) Bool))
        (lam
          n
          (con integer)
          (let
            (nonrec)
            (termbind
              (nonstrict)
              (vardecl n (con integer))
              [ [ subtractInteger n ] (con integer 1) ]
            )
            (force
              [
                [
                  {
                    [ Bool_match [ [ equalsInteger n ] (con integer 0) ] ]
                    (delayed Bool)
                  }
                  (delay True)
                ]
                (delay
                  (force
                    [
                      [
                        {
                          [ Bool_match [ [ equalsInteger n ] (con integer 0) ] ]
                          (delayed Bool)
                        }
                        (delay False)
                      ]
                      (delay [ even [ [ subtractInteger n ] (con integer 1) ] ])
                    ]
                  )
                )
              ]
            )
          )
        )
      )
      even
    )
  )
)