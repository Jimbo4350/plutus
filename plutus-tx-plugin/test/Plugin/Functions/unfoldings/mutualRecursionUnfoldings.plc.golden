(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (let
      (rec)
      (termbind
        (strict)
        (vardecl evenDirect (fun (con integer) Bool))
        (lam
          n
          (con integer)
          (force
            [
              [
                {
                  [
                    Bool_match
                    [
                      [
                        [
                          { (builtin ifThenElse) Bool }
                          [ [ (builtin equalsInteger) n ] (con integer 0) ]
                        ]
                        True
                      ]
                      False
                    ]
                  ]
                  (delayed Bool)
                }
                (delay True)
              ]
              (delay
                [
                  oddDirect [ [ (builtin subtractInteger) n ] (con integer 1) ]
                ]
              )
            ]
          )
        )
      )
      (termbind
        (strict)
        (vardecl oddDirect (fun (con integer) Bool))
        (lam
          n
          (con integer)
          (force
            [
              [
                {
                  [
                    Bool_match
                    [
                      [
                        [
                          { (builtin ifThenElse) Bool }
                          [ [ (builtin equalsInteger) n ] (con integer 0) ]
                        ]
                        True
                      ]
                      False
                    ]
                  ]
                  (delayed Bool)
                }
                (delay False)
              ]
              (delay
                [
                  evenDirect [ [ (builtin subtractInteger) n ] (con integer 1) ]
                ]
              )
            ]
          )
        )
      )
      [ evenDirect (con integer 4) ]
    )
  )
)