(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (termbind
      (strict)
      (vardecl error (all a (type) (fun (con unit) a)))
      (abs a (type) (lam thunk (con unit) (error a)))
    )
    (termbind
      (nonstrict) (vardecl joinError Unit) [ { error Unit } (con unit ()) ]
    )
    (termbind
      (strict)
      (vardecl joinError (fun Bool (fun Bool Unit)))
      (lam
        x
        Bool
        (lam
          y
          Bool
          (force
            [
              [
                { [ Bool_match x ] (delayed Unit) }
                (delay
                  (force
                    [
                      [ { [ Bool_match y ] (delayed Unit) } (delay joinError) ]
                      (delay Unit)
                    ]
                  )
                )
              ]
              (delay Unit)
            ]
          )
        )
      )
    )
    joinError
  )
)