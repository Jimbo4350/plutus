(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        x
        (con integer)
        (lam
          y
          (con integer)
          [
            [
              [
                { (builtin ifThenElse) Bool }
                [ [ (builtin equalsInteger) x ] y ]
              ]
              True
            ]
            False
          ]
        )
      )
    )
    (lam
      ds
      (con integer)
      (lam
        ds
        (con integer)
        (force
          [
            [
              {
                [ Bool_match [ [ equalsInteger ds ] ds ] ]
                (delayed (con integer))
              }
              (delay ds)
            ]
            (delay ds)
          ]
        )
      )
    )
  )
)